"""
The cmdpedia for this module was generated by importing the module and calling the `generate_cmdpedia` function.

cmdpedia generator can be used by either importing the core module and calling the `generate_cmdpedia` function, or by running the package as a script.
"""

import click
import cmdpedia_generator


@click.group()
def cli():
    """CLI group."""
    pass


@click.group()
def subcli():
    """CLI group."""
    pass


@click.group()
def subsubcli():
    """CLI group."""
    pass


cli.add_command(subcli, name='subcli')
subcli.add_command(subsubcli, name='subsubcli')


@cli.command()
@click.option("--verbose", is_flag=True, default=False, help="Enable verbose output.")
@click.option("--count", default=1, help="Number of greetings.")
@click.argument("name")
def greet(name, count, verbose):
    """Greet the user with a message."""
    if verbose:
        click.echo(f"Verbose mode enabled.")
    for _ in range(count):
        click.echo(f"Hello {name}!")


@subcli.command()
@click.argument("src")
@click.argument("dest")
@click.option("--force", is_flag=True, default=False, help="Force the copy operation.")
@click.option("--backup", is_flag=False, default=True, help="Backup before copying.")
def copy(src, dest, force, backup):
    """Copy files from src to dest."""
    click.echo(f"Copying from {src} to {dest}")
    if force:
        click.echo("Force option enabled.")
    if backup:
        click.echo("Backup will be created.")


@subsubcli.command()
def gate():
    """Copy files from src to dest."""
    click.echo(f"gated")


@cli.command()
@click.argument('program_type')
def generate_cmdpedia(program_type):
    """
    Generate cmdpedia page.

    :param program_type: The type of program to generate documentation for. Must be one of: 'click'.
    """
    cmdpedia_generator.generate(program_type, __file__)


if __name__ == "__main__":
    cli()
